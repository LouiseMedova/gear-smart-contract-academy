"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearEvents = void 0;
const events_types_1 = require("./events-types");
class GearEvents {
    constructor(gearApi) {
        this.api = gearApi;
    }
    subscribeToLogEvents(callback) {
        return this.api.query.system.events((events) => {
            events
                .filter(({ event }) => this.api.events.gear.Log.is(event))
                .forEach(({ event }) => {
                setTimeout(() => {
                    callback(new events_types_1.LogEvent(event));
                }, 100);
            });
        });
    }
    subscribeToProgramEvents(callback) {
        return this.api.query.system.events((events) => {
            events
                .filter(({ event }) => this.api.events.gear.InitSuccess.is(event) || this.api.events.gear.InitFailure.is(event))
                .forEach(({ event }) => {
                setTimeout(() => {
                    callback(new events_types_1.ProgramEvent(event));
                }, 100);
            });
        });
    }
    subscribeToTransferEvents(callback) {
        return this.api.query.system.events((events) => {
            events
                .filter(({ event }) => this.api.events.balances.Transfer.is(event))
                .forEach(({ event }) => {
                callback(new events_types_1.TransferEvent(event));
            });
        });
    }
    subscribeToNewBlocks(callback) {
        return this.api.rpc.chain.subscribeNewHeads((header) => {
            callback(header);
        });
    }
    subscribeToBalanceChange(accountAddress, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            let { data: { free: previousFree }, } = (yield this.api.query.system.account(accountAddress));
            return this.api.query.system.account(accountAddress, ({ data: { free: currentFree } }) => {
                if (!currentFree.sub(previousFree).isZero()) {
                    callback(this.api.createType('Balance', currentFree));
                    previousFree = currentFree;
                }
            });
        });
    }
}
exports.GearEvents = GearEvents;
