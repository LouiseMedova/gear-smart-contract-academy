"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearApi = void 0;
const Program_1 = require("./Program");
const Message_1 = require("./Message");
const Balance_1 = require("./Balance");
const Events_1 = require("./Events");
const State_1 = require("./State");
const MessageReply_1 = require("./MessageReply");
const default_1 = require("./default");
const api_1 = require("@polkadot/api");
const Blocks_1 = require("./Blocks");
const Storage_1 = require("./Storage");
const Mailbox_1 = require("./Mailbox");
const Claim_1 = require("./Claim");
const Code_1 = require("./Code");
class GearApi extends api_1.ApiPromise {
    constructor(options = {}) {
        const { types, providerAddress } = options, restOptions = __rest(options, ["types", "providerAddress"]);
        const provider = (restOptions === null || restOptions === void 0 ? void 0 : restOptions.provider) || new api_1.WsProvider(providerAddress !== null && providerAddress !== void 0 ? providerAddress : 'ws://127.0.0.1:9944');
        const defaultTypes = types ? Object.assign(Object.assign({}, types), default_1.gearTypes) : default_1.gearTypes;
        super(Object.assign({ provider, derives: {}, types: Object.assign({}, defaultTypes), rpc: Object.assign({}, default_1.gearRpc) }, restOptions));
        this.isReady.then(() => {
            this.program = new Program_1.GearProgram(this);
            this.message = new Message_1.GearMessage(this);
            this.balance = new Balance_1.GearBalance(this);
            this.reply = new MessageReply_1.GearMessageReply(this);
            this.gearEvents = new Events_1.GearEvents(this);
            this.defaultTypes = defaultTypes;
            this.programState = new State_1.GearProgramState(this);
            this.blocks = new Blocks_1.GearBlock(this);
            this.storage = new Storage_1.GearStorage(this);
            this.claimValueFromMailbox = new Claim_1.GearClaimValue(this);
            this.mailbox = new Mailbox_1.GearMailbox(this);
            this.code = new Code_1.GearCode(this);
        });
    }
    static create(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const api = new GearApi(options);
            yield api.isReady;
            return api;
        });
    }
    totalIssuance() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.query.balances.totalIssuance()).toHuman();
        });
    }
    chain() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.rpc.system.chain()).toHuman();
        });
    }
    nodeName() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.rpc.system.name()).toHuman();
        });
    }
    nodeVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.rpc.system.version()).toHuman();
        });
    }
    /**
     * Method provides opportunity to get informations about error occurs in ExtrinsicFailed event
     * @param event
     * @returns
     */
    getExtrinsicFailedError(event) {
        const error = event.data[0];
        const { isModule, asModule } = error;
        return isModule ? this.registry.findMetaError(asModule) : null;
    }
}
exports.GearApi = GearApi;
