"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearTransaction = void 0;
const create_type_1 = require("./create-type");
const util_1 = require("@polkadot/util");
const errors_1 = require("./errors");
class GearTransaction {
    constructor(gearApi) {
        this.api = gearApi;
        this.createType = new create_type_1.CreateType(gearApi);
    }
    signAndSend(account, optionsOrCallback, optionalCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const [options, callback] = (0, util_1.isFunction)(optionsOrCallback)
                ? [undefined, optionsOrCallback]
                : [optionsOrCallback, optionalCallback];
            try {
                return yield this.submitted.signAndSend(account, options, callback);
            }
            catch (error) {
                const errorCode = +error.message.split(':')[0];
                if (errorCode === 1010) {
                    throw new errors_1.TransactionError('Account balance too low');
                }
                else {
                    throw new errors_1.TransactionError(error.message);
                }
            }
        });
    }
}
exports.GearTransaction = GearTransaction;
