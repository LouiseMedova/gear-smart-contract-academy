import { GearProgram } from './Program';
import { GearMessage } from './Message';
import { GearBalance } from './Balance';
import { GearEvents } from './Events';
import { GearProgramState } from './State';
import { GearMessageReply } from './MessageReply';
import { GearApiOptions } from './types/interfaces';
import { ApiPromise } from '@polkadot/api';
import { Event } from '@polkadot/types/interfaces';
import { GearBlock } from './Blocks';
import { GearStorage } from './Storage';
import { GearMailbox } from './Mailbox';
import { GearClaimValue } from './Claim';
import { GearCode } from './Code';
import { RegistryError } from '@polkadot/types-codec/types';
export declare class GearApi extends ApiPromise {
    program: GearProgram;
    programState: GearProgramState;
    message: GearMessage;
    reply: GearMessageReply;
    balance: GearBalance;
    gearEvents: GearEvents;
    defaultTypes: any;
    blocks: GearBlock;
    storage: GearStorage;
    mailbox: GearMailbox;
    claimValueFromMailbox: GearClaimValue;
    code: GearCode;
    constructor(options?: GearApiOptions);
    static create(options?: GearApiOptions): Promise<GearApi>;
    totalIssuance(): Promise<string>;
    chain(): Promise<string>;
    nodeName(): Promise<string>;
    nodeVersion(): Promise<string>;
    /**
     * Method provides opportunity to get informations about error occurs in ExtrinsicFailed event
     * @param event
     * @returns
     */
    getExtrinsicFailedError(event: Event): RegistryError;
}
//# sourceMappingURL=GearApi.d.ts.map