import { GearApi } from '../GearApi';
import { Metadata } from '../types/interfaces';
import { Registry, Codec } from '@polkadot/types/types';
export declare class CreateType {
    registry: Registry;
    namespaces: Map<string, string>;
    constructor(gearApi?: GearApi);
    private createRegistry;
    /**
     * Register custom types in case of use custom types without
     * @param types
     * @example
     * ```javascript
     * const types = {
     *    CustomStruct: {
     *      fieldA: 'String',
     *      fieldB: 'u8'
     *    },
     *    CustomEnum: {
     *      _enum: {
     *        optionA: 'Option<CustomStruct>',
     *        optionB: 'BTreeSet<i32>'
     *      }
     *    }
     * };
     * const createType = new CreateType();
     * createType.registerTypes(types);
     * createType.create('CustomStruct', { fieldA: 'Hello', fieldB: 255 });
     * ```
     */
    registerTypes(types?: any): void;
    /**
     *
     * @param type `TypeName` to encode or decode payload
     * @param payload `Payload` that have to be encoded or decoded
     * @param meta `Metadata` if type isn't standart rust Type
     * @returns Codec
     * @example
     * ```javascript
     * const createType = new CreateType();
     * const encoded = createType.create('String', 'Hello, World');
     * console.log(encoded.toHex()); // 0x48656c6c6f2c20576f726c6421
     *
     * const decoded = createType.create('String', '0x48656c6c6f2c20576f726c6421');
     * console.log(decoded.toHuman()); // "Hello, World!"
     *
     * // create type with metadata
     * const metadata = fs.readFileSync('path/to/file/with/metadata/*.meta.wasm);
     * const encoded = create(metadata.handle_input, somePayload, metadata);
     * console.log(encoded.toHex());
     * ```
     */
    create(type: string, payload: any, meta?: Metadata): Codec;
    /**
     *
     * @param type `TypeName` to encode or decode payload
     * @param payload `Payload` that have to be encoded or decoded
     * @param meta `Metadata` if type isn't standart rust Type
     * @returns Codec
     * @example
     * ```javascript
     * const encoded = CreateType.create('String', 'Hello, World');
     * console.log(encoded.toHex()); // 0x48656c6c6f2c20576f726c6421
     * ```
     */
    static create(type: string, payload: any, meta?: Metadata): Codec;
    private createType;
    /**
     * @deprecated use `CreateType.create()`
     */
    static encode(type: any, payload: any, meta?: Metadata): Codec;
    /**
     * @deprecated use `CreateType.create()`
     */
    static decode(type: string, payload: any, meta?: Metadata): Codec;
}
//# sourceMappingURL=CreateType.d.ts.map