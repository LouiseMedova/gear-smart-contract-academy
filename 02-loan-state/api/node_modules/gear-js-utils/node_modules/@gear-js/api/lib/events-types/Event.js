"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageDispatchedEvent = exports.DebugDataSnapshotEvent = exports.DispatchMessageEnqueuedEvent = exports.InitMessageEnqueuedEvent = exports.TransferEvent = exports.LogEvent = exports.InitFailureEvent = exports.InitSuccessEvent = exports.ProgramEvent = exports.GearEvent = void 0;
const types_1 = require("@polkadot/types");
const EventData_1 = require("./EventData");
class GearEvent extends types_1.GenericEvent {
    constructor(event) {
        super(event.registry, event.toU8a());
    }
}
exports.GearEvent = GearEvent;
class ProgramEvent extends GearEvent {
    get data() {
        return new EventData_1.ProgramData(this.get('data'));
    }
}
exports.ProgramEvent = ProgramEvent;
class InitSuccessEvent extends GearEvent {
    get data() {
        return new EventData_1.InitSuccessData(this.get('data'));
    }
}
exports.InitSuccessEvent = InitSuccessEvent;
class InitFailureEvent extends GearEvent {
    get data() {
        return new EventData_1.InitFailureData(this.get('data'));
    }
}
exports.InitFailureEvent = InitFailureEvent;
class LogEvent extends GearEvent {
    get data() {
        return new EventData_1.LogData(this.get('data'));
    }
}
exports.LogEvent = LogEvent;
class TransferEvent extends GearEvent {
    get data() {
        return new EventData_1.TransferData(this.get('data'));
    }
}
exports.TransferEvent = TransferEvent;
class InitMessageEnqueuedEvent extends GearEvent {
    get data() {
        return new EventData_1.InitMessageEnqueuedData(this.get('data'));
    }
}
exports.InitMessageEnqueuedEvent = InitMessageEnqueuedEvent;
class DispatchMessageEnqueuedEvent extends GearEvent {
    get data() {
        return new EventData_1.DispatchMessageEnqueuedData(this.get('data'));
    }
}
exports.DispatchMessageEnqueuedEvent = DispatchMessageEnqueuedEvent;
class DebugDataSnapshotEvent extends GearEvent {
    get data() {
        return new EventData_1.DebugData(this.get('data'));
    }
}
exports.DebugDataSnapshotEvent = DebugDataSnapshotEvent;
class MessageDispatchedEvent extends GearEvent {
    get data() {
        return new EventData_1.MessageDispatchedData(this.get('data'));
    }
}
exports.MessageDispatchedEvent = MessageDispatchedEvent;
