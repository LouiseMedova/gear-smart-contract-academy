"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearBlock = void 0;
const blocks_errors_1 = require("./errors/blocks.errors");
const util_1 = require("@polkadot/util");
const create_type_1 = require("./create-type");
class GearBlock {
    constructor(api) {
        this.api = api;
    }
    /**
     * Get data of particular block by blockNumber or blockHash
     * @param hashOrNumber
     * @returns
     */
    get(hashOrNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = (0, util_1.isU8a)(hashOrNumber) || (0, util_1.isHex)(hashOrNumber) ? hashOrNumber : yield this.getBlockHash(+hashOrNumber);
            try {
                return yield this.api.rpc.chain.getBlock(hash);
            }
            catch (error) {
                throw new blocks_errors_1.GetBlockError(error.message, hash);
            }
        });
    }
    /**
     * Get blockHash by number
     * @param number number of block
     * @returns blockHash
     */
    getBlockHash(number) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.rpc.chain.getBlockHash(number);
        });
    }
    /**
     * Get block number
     * @param hash
     * @returns Compact<BlockNumber>
     */
    getBlockNumber(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const block = yield this.get(hash);
            return block.block.header.number;
        });
    }
    /**
     * Get timestamp of block
     * @param hashOrNumber hash or number of particular block
     * @returns
     */
    getBlockTimestamp(hashOrNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const block = yield this.get(hashOrNumber);
            const tsAsU8a = block.block.extrinsics.find((value) => value.method.method === 'set' && value.method.section === 'timestamp').data;
            const ts = create_type_1.CreateType.create('Compact<u64>', tsAsU8a);
            return ts;
        });
    }
    /**
     * Get all extrinsic of particular block
     * @param blockHash hash of particular block
     * @returns Vec of extrinsics
     */
    getExtrinsics(blockHash) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.get(blockHash)).block.extrinsics;
        });
    }
    /**
     * Get all events of particular block
     * @param blockHash hash of particular block
     * @returns Vec of events
     */
    getEvents(blockHash) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiAt = yield this.api.at(blockHash);
            return apiAt.query.system.events();
        });
    }
    /**
     * Get hash of last finalized block
     * @returns Hash of finalized head
     */
    getFinalizedHead() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.api.rpc.chain.getFinalizedHead();
        });
    }
}
exports.GearBlock = GearBlock;
