"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadProgram = void 0;
const api_1 = require("@gear-js/api");
const fs_1 = require("fs");
const uploadProgram = (api, pathToProgram, pathToMeta, account, value, initPayload) => __awaiter(void 0, void 0, void 0, function* () {
    const code = (0, fs_1.readFileSync)(pathToProgram);
    const metaFile = pathToMeta ? (0, fs_1.readFileSync)(pathToMeta) : undefined;
    const meta = metaFile ? yield (0, api_1.getWasmMetadata)(metaFile) : undefined;
    console.log(pathToMeta);
    const gas = yield api.program.gasSpent.init(account.address, code, initPayload, value, meta);
    console.log("GAS SPENT", gas.toHuman());
    const programId = api.program.submit({ code, initPayload, gasLimit: gas }, meta);
    yield api.program.signAndSend(account, (data) => {
        console.log(data.toHuman());
    });
    return programId;
});
exports.uploadProgram = uploadProgram;
//# sourceMappingURL=upload-program.js.map