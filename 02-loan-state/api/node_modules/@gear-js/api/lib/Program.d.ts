/// <reference types="node" />
import { Hex, ProgramId } from './types';
import { Metadata } from './types/interfaces';
import { AnyNumber, ISubmittableResult } from '@polkadot/types/types';
import { u64 } from '@polkadot/types';
import { BalanceOf } from '@polkadot/types/interfaces';
import { GearTransaction } from './Transaction';
import { GearGasSpent } from './GasSpent';
import { GearApi } from './GearApi';
import { SubmittableExtrinsic } from '@polkadot/api/types';
export declare class GearProgram extends GearTransaction {
    gasSpent: GearGasSpent;
    constructor(gearApi: GearApi);
    /**
     * @param program Upload program data
     * @param meta Metadata
     * @returns ProgramId
     * @example
     * ```javascript
     * const code = fs.readFileSync('path/to/program.opt.wasm');
     * const meta = await getWasmMetadata(fs.readFileSync('path/to/program.meta.wasm'));
     * const api = await GearApi.create();
     * const { programId, salt, submitted } = api.program.submit({
     *   code,
     *   initPayload: {field: 'someValue'},
     *   gasLimit: 20_000_000,
     * }, meta)
     * api.program.signAndSend(account, (events) => {
     *   events.forEach(({event}) => console.log(event.toHuman()))
     * })
     * ```
     */
    submit(program: {
        code: Buffer;
        salt?: `0x${string}`;
        initPayload?: string | any;
        gasLimit: u64 | AnyNumber;
        value?: BalanceOf | AnyNumber;
    }, meta?: Metadata, messageType?: string): {
        programId: ProgramId;
        salt: Hex;
        submitted: SubmittableExtrinsic<'promise', ISubmittableResult>;
    };
    /**
     * Get ids of all uploaded programs
     * @returns
     */
    allUploadedPrograms(): Promise<string[]>;
}
//# sourceMappingURL=Program.d.ts.map