import { MessageInfo, Reason, Reply, QueuedDispatch, ProgramDetails } from '../types/interfaces';
import { Vec, u128, Option, u8, GenericEventData, Null, Bytes, Type } from '@polkadot/types';
import { H256 } from '@polkadot/types/interfaces';
export declare class GearEventData extends GenericEventData {
    constructor(data: GenericEventData);
}
export declare class MessageInfoData extends GearEventData {
    get messageId(): H256;
    get programId(): H256;
    get origin(): H256;
}
export declare class ProgramData extends GearEventData {
    get info(): MessageInfo;
    get reason(): Reason;
}
export declare class LogData extends GearEventData {
    get id(): H256;
    get source(): H256;
    get destination(): H256;
    get payload(): Vec<u8>;
    get value(): u128;
    get reply(): Option<Reply>;
}
export declare class TransferData extends GearEventData {
    get from(): H256;
    get to(): H256;
    get value(): u128;
}
export declare class InitMessageEnqueuedData extends MessageInfoData {
}
export declare class DispatchMessageEnqueuedData extends MessageInfoData {
}
export declare class InitSuccessData extends MessageInfoData {
}
export declare class InitFailureData extends ProgramData {
}
export declare class DebugData extends GearEventData {
    get dispatchQueue(): Vec<QueuedDispatch>;
    get programs(): Vec<ProgramDetails>;
}
export declare class ExecutionResult extends Type {
    get isSuccess(): boolean;
    get isFailure(): boolean;
    get asSuccess(): Null;
    get asFailure(): Bytes;
}
export declare class MessageDispatchedData extends GearEventData {
    get messageId(): H256;
    get outcome(): ExecutionResult;
}
//# sourceMappingURL=EventData.d.ts.map