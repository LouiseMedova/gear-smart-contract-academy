"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readState = void 0;
const importObj_1 = __importDefault(require("./importObj"));
const utils_1 = require("./utils");
function readState(wasmBytes, pages, inputValue, blockTimestamp) {
    return __awaiter(this, void 0, void 0, function* () {
        const memory = new WebAssembly.Memory({ initial: (0, utils_1.getInitialLength)(pages) });
        const module = yield WebAssembly.instantiate(wasmBytes, (0, importObj_1.default)(memory, false, inputValue, blockTimestamp));
        Object.keys(pages).forEach((pageNumber) => {
            const start = +pageNumber * utils_1.PAGE_SIZE;
            const end = start + utils_1.PAGE_SIZE;
            const page = pages[pageNumber];
            for (let i = start; i < end; i++) {
                new Uint8Array(memory.buffer)[i] = page[i % utils_1.PAGE_SIZE];
            }
        });
        const { exports } = module.instance;
        return (exports === null || exports === void 0 ? void 0 : exports.meta_state) ? new Uint8Array((0, utils_1.getExportValue)(memory, exports.meta_state)) : null;
    });
}
exports.readState = readState;
