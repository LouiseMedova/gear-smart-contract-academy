"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearMailbox = void 0;
class GearMailbox {
    constructor(gearApi) {
        this.api = gearApi;
        this.claimValue = gearApi.claimValueFromMailbox;
    }
    /**
     * Read mailbox
     * @param accountId
     * @returns
     * @example
     * ```javascript
     * const api = await GearApi.create();
     * const mailbox = await api.mailbox.read('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY');
     * console.log(mailbox);
     * ```
     */
    read(accountId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (messageId) {
                const mailbox = yield this.api.query.gear['mailbox'](accountId, messageId);
                return mailbox.toHuman();
            }
            else {
                const keys = yield this.api.query.gear['mailbox'].keys(accountId);
                if (keys.length === 0) {
                    return [];
                }
                const keyPrefixes = this.api.query.gear['mailbox'].keyPrefix(accountId);
                const keysPaged = yield this.api.rpc.state.getKeysPaged(keyPrefixes, 1000, keyPrefixes);
                const mailbox = (yield this.api.rpc.state.queryStorageAt(keysPaged));
                return mailbox.map((option, index) => {
                    return [
                        keys[index].toHuman(),
                        this.api
                            .createType('GearCoreMessageStoredStoredMessage', option.unwrap())
                            .toHuman(),
                    ];
                });
            }
        });
    }
}
exports.GearMailbox = GearMailbox;
