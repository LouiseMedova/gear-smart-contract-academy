"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GearGasSpent = void 0;
const util_1 = require("@polkadot/util");
const create_type_1 = require("./create-type");
const utils_1 = require("./utils");
const program_errors_1 = require("./errors/program.errors");
class GearGasSpent {
    constructor(api) {
        this.api = api;
        this.createType = new create_type_1.CreateType(this.api);
    }
    getPayload(payload, metaOrTypeOfPayload, meta_type) {
        if ((0, util_1.isHex)(payload)) {
            return payload;
        }
        else if ((0, util_1.isU8a)(payload)) {
            return (0, util_1.u8aToHex)(payload);
        }
        if (!metaOrTypeOfPayload) {
            throw new program_errors_1.GetGasSpentError('Impossible to create bytes from payload without specified type or meta');
        }
        const [type, meta] = (0, util_1.isString)(metaOrTypeOfPayload)
            ? [metaOrTypeOfPayload, undefined]
            : [metaOrTypeOfPayload[meta_type], metaOrTypeOfPayload];
        return (0, utils_1.createPayload)(this.createType, type, payload, meta);
    }
    init(sourceId, code, payload, value, metaOrTypeOfPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.rpc['gear'].getInitGasSpent(sourceId, (0, util_1.isHex)(code) ? code : this.createType.create('bytes', Array.from(code)).toHex(), this.getPayload(payload, metaOrTypeOfPayload, 'init_input'), value || 0);
        });
    }
    handle(sourceId, destinationId, payload, value, metaOrTypeOfPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.rpc['gear'].getHandleGasSpent(sourceId, destinationId, this.getPayload(payload, metaOrTypeOfPayload, 'handle_input'), value || 0);
        });
    }
    reply(sourceId, messageId, exitCode, payload, value, metaOrTypeOfPayload) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.api.rpc['gear'].getReplyGasSpent(sourceId, messageId, exitCode, this.getPayload(payload, metaOrTypeOfPayload, 'async_handle_input'), value || 0);
        });
    }
}
exports.GearGasSpent = GearGasSpent;
